---
- name: Check if NVM is already installed
  stat:
    path: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
  register: nvm_installed

- name: Download and install NVM
  shell: |
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
  when: not nvm_installed.stat.exists

- name: Source NVM in current shell
  shell: |
    . "{{ ansible_env.HOME }}/.nvm/nvm.sh"
    nvm install {{ node_version }}
    nvm use {{ node_version }}
  args:
    executable: /bin/bash
  register: node_install_result
  changed_when: "'is already installed' not in node_install_result.stderr"

- name: Enable corepack for pnpm
  shell: |
    . "{{ ansible_env.HOME }}/.nvm/nvm.sh"
    nvm use {{ node_version }}
    corepack enable pnpm
  args:
    executable: /bin/bash
  register: pnpm_install_result
  changed_when: "'is already enabled' not in pnpm_install_result.stderr"

- name: Verify Node.js installation
  shell: |
    . "{{ ansible_env.HOME }}/.nvm/nvm.sh"
    nvm use {{ node_version }}
    node -v
  args:
    executable: /bin/bash
  register: node_version_check
  changed_when: false

- name: Verify pnpm installation
  shell: |
    . "{{ ansible_env.HOME }}/.nvm/nvm.sh"
    nvm use {{ node_version }}
    pnpm -v
  args:
    executable: /bin/bash
  register: pnpm_version_check
  changed_when: false

- name: Display Node.js and pnpm versions
  debug:
    msg: 
      - "Node.js version: {{ node_version_check.stdout }}"
      - "pnpm version: {{ pnpm_version_check.stdout }}"