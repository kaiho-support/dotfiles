---
- name: Check Homebrew installation
  stat:
    path: "{{ homebrew_bin }}"
  register: homebrew_exists
  tags: ['tools-cli', 'tools-git']

- name: Fail if Homebrew is not available
  fail:
    msg: >-
      Homebrew is not installed at {{ homebrew_bin }}.
      Please install Homebrew first or run with the 'homebrew' tag.
  when: not homebrew_exists.stat.exists
  tags: ['tools-cli', 'tools-git']

- name: Install CLI tools via Homebrew (batch)
  shell: "{{ homebrew_bin }} install {{ selected_cli_tools | default(cli_tools) | join(' ') }}"
  environment:
    PATH: "{{ homebrew_path }}/bin:{{ ansible_env.PATH }}"
  become_user: "{{ target_user }}"
  register: brew_install_result
  when: homebrew_exists.stat.exists
  tags: ['tools-cli', 'tools-git']
  async: 600
  poll: 0

- name: Wait for Homebrew installation to complete
  async_status:
    jid: "{{ brew_install_result.ansible_job_id }}"
  register: brew_install_status
  until: brew_install_status.finished
  retries: 60
  delay: 10
  when: homebrew_exists.stat.exists and brew_install_result.ansible_job_id is defined
  changed_when: >
    brew_install_status.finished and
    (brew_install_status.stderr is not defined or 'already installed' not in brew_install_status.stderr)
  failed_when: >
    brew_install_status.finished and
    brew_install_status.rc is defined and
    brew_install_status.rc != 0 and
    (brew_install_status.stderr is not defined or 'already installed' not in brew_install_status.stderr)
  tags: ['tools-cli', 'tools-git']

- name: Verify installed tools
  shell: "{{ homebrew_bin }} list --versions {{ item }}"
  environment:
    PATH: "{{ homebrew_path }}/bin:{{ ansible_env.PATH }}"
  become_user: "{{ target_user }}"
  loop: "{{ selected_cli_tools | default(cli_tools) }}"
  register: tool_versions
  failed_when: false
  when: homebrew_exists.stat.exists
  tags: ['tools-cli', 'tools-git']

- name: Display installed tool versions
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ tool_versions.results }}"
  when: item.stdout is defined
  tags: ['tools-cli', 'tools-git']
